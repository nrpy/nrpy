name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Run on the 1st and 15th of each month, at 4:47AM UTC, to check for breakages due to e.g., sympy-dev.
  schedule:
    - cron: '47 4 1,15 * *'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
       os: ['ubuntu-20.04', 'ubuntu-22.04']
       python-version: ['3.6.7', '3.x']  # runs jobs on python 3.6.7 and the latest python version
       exclude:
         - os: 'ubuntu-22.04'
           python-version: '3.6.7'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Display Python version
      run: python --version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U -r requirements.txt
        if [ "${{ matrix.python-version }}" != "3.6.7" ]; then
          pip install -U -r requirements-dev.txt
        else
          # Install packages from requirements-dev.txt except those with a fixed version.
          cat requirements-dev.txt | grep -v '==' | xargs pip install -U
        fi
        pip install -U clang-format ipython setuptools
        sudo apt-get -y install libgsl-dev

    - name: Install latest DEVELOPMENT sympy for ubuntu-22.04
      if: matrix.os == 'ubuntu-22.04'
      run: pip install git+https://github.com/sympy/sympy.git

    - name: Install sympy for ubuntu-20.04
      if: matrix.os == 'ubuntu-20.04'
      run: pip install sympy

    - name: Display sympy and clang-format versions
      run: |
        echo "Running CI tests with SymPy version = $(isympy --version)"
        echo "Running CI tests with clang-format version = $(clang-format --version)"

    - name: Check mypy and black versions when Python != 3.6.7 chosen (they are too broken in that Python version).
      if: matrix.python-version != '3.6.7'
      run: |
        mypy --version
        black --version

    - name: Run doctests, black, mypy, and pylint on each file.
      run: |
        failed_tests=()
        # Use find to locate python files based on pattern or directory structure.
        #   Don't analyze Python scripts in tests/ (though they should pass!)
        python_files=$(find . -name '*.py' -not -name '__init__.py' -not -path './build/*' -not -path '*/tests/*')

        for python_file in $python_files; do
          echo ""
          echo "-={ $python_file }=-"
          if [[ ! $python_file =~ nrpy/examples/.* ]]; then
            echo "-={ Step 1: Doctests/run Python module }=-"
            DOCTEST_MODE=1 PYTHONPATH=.:$PYTHONPATH python $python_file || { failed_tests+=("doctest in $python_file"); break; }
          fi
          if [ "${{ matrix.python-version }}" != "3.6.7" ]; then
            # Turns out that black in Python 3.6.7 has a heart attack when parsing equations/general_relativity/BSSN_quantities.py:
            # INTERNAL ERROR: Black produced code that is not equivalent to the source. Please report a bug on .... [HOW ABOUT NO. BEGGING FOR WONTFIX]
            echo "-={ Step 2: black $python_file }=-"
            black --check $python_file || { failed_tests+=("black in $python_file"); break; }
            echo "-={ Step 3: mypy }=-"
            PYTHONPATH=.:$PYTHONPATH mypy --strict --pretty --allow-untyped-calls $python_file || { failed_tests+=("mypy in $python_file"); break; }
          fi
          echo "-={ Step 4: pylint }=-"
          if [ "${{ matrix.python-version }}" != "3.6.7" ]; then
            pylint_score=$(PYTHONPATH=.:$PYTHONPATH pylint --rcfile=.pylintrc $python_file | tail -2 | grep -Eo '[0-9\.]+' | head -1 || echo "0")
          else
            pylint_score=$(PYTHONPATH=.:$PYTHONPATH pylint --rcfile=.pylintrc_python36 $python_file | tail -2 | grep -Eo '[0-9\.]+' | head -1 || echo "0")
          fi
          echo "Pylint score is $pylint_score"
          if (( $(echo "$pylint_score < 9.5" | bc -l) )); then
            PYTHONPATH=.:$PYTHONPATH pylint --rcfile=.pylintrc $python_file || true
            echo "Pylint score is below 9.5, failing..."
            failed_tests+=("pylint in $python_file")
            break
          fi
          PYTHONPATH=.:$PYTHONPATH pylint --rcfile=.pylintrc $python_file || true
          echo "-={ Step 5: pydocstyle }=-"
          pydocstyle $python_file || { failed_tests+=("pydocstyle in $python_file"); break; }
        done

        if [ ${#failed_tests[@]} -ne 0 ]; then
          echo "The following tests failed: ${failed_tests[*]}"
          exit 1
        fi

    - name: Check that pip installed nrpy creates valid, compilable C example projects
      run: |
        pwd &&
        pip install . &&
        mkdir tmp &&
        cd tmp &&
        python -m nrpy.examples.wave_equation_cartesian   && (cd project/wavetoy && make && make clean) &&
        python -m nrpy.examples.wave_equation_curvilinear && (cd project/curviwavetoy && make && make clean) &&
        python -m nrpy.examples.nrpyelliptic_conformally_flat && (cd project/nrpyelliptic_conformally_flat && make && make clean) &&
        python -m nrpy.examples.two_blackholes_collide    && (cd project/two_blackholes_collide && make && make clean) &&
        python -m nrpy.examples.blackhole_spectroscopy    && (cd project/blackhole_spectroscopy && make && make clean) &&
        python -m nrpy.examples.spinning_blackhole        && (cd project/spinning_blackhole && make && make clean) &&
        python -m nrpy.examples.nrpypn_quasicircular_momenta && (cd project/nrpypn_quasicircular_momenta && make && make clean) &&
        python -m nrpy.examples.wave_equation_multicoord_wavetoy && (cd project/multicoords_curviwavetoy && make && make clean)

  build-mac:
    runs-on: macos-latest

    strategy:
      matrix:
        python-version: [ '3.6.7', '3.x' ]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Display Python version
      run: python --version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ "${{ matrix.python-version }}" != "3.6.7" ]; then pip install -U mypy==1.8.0 black==24.1.1; fi
        pip install -U pylint clang-format ipython setuptools
        brew install gsl

    - name: Check that pip installed nrpy creates valid, compilable C example projects
      run: |
        pwd &&
        pip install . &&
        mkdir tmp &&
        cd tmp &&
        python -m nrpy.examples.wave_equation_cartesian   && (cd project/wavetoy && make && make clean) &&
        python -m nrpy.examples.wave_equation_curvilinear && (cd project/curviwavetoy && make && make clean) &&
        python -m nrpy.examples.nrpyelliptic_conformally_flat && (cd project/nrpyelliptic_conformally_flat && make && make clean) &&
        python -m nrpy.examples.two_blackholes_collide    && (cd project/two_blackholes_collide && make && make clean) &&
        python -m nrpy.examples.blackhole_spectroscopy    && (cd project/blackhole_spectroscopy && make && make clean) &&
        python -m nrpy.examples.spinning_blackhole        && (cd project/spinning_blackhole && make && make clean) &&
        python -m nrpy.examples.nrpypn_quasicircular_momenta && (cd project/nrpypn_quasicircular_momenta && make && make clean) &&
        python -m nrpy.examples.wave_equation_multicoord_wavetoy && (cd project/multicoords_curviwavetoy && make && make clean)
